<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>Katherine Cox-Buday</title>
    <link>http://katherine.cox-buday.com</link>
    <description>static site generator</description>
    <pubDate>Sat, 05 Nov 2022 17:42:54 MDT</pubDate>
    <lastBuildDate>Sat, 05 Nov 2022 17:42:54 MDT</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>Is migrating from Twitter to Mastodon risky?</title>
      <link>http://katherine.cox-buday.com/blog/2022/11/05/is-migrating-from-twitter-to-mastodon-risky/</link>
      <description><![CDATA[<div class="post">
  <div class="col-sm-3 right-align post-meta">
    <h3>&nbsp;<!-- Placeholder for alignment with post --></h3>
  </div>
  <div class="col-sm-9">
    <div class="post">
      <h3>Is migrating from Twitter to Mastodon risky?</h3>
      <div id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org00ad441">Your provider could read your DMs and private posts!</a></li>
<li><a href="#orge192597">Your provider can just delete your account!</a></li>
<li><a href="#org112733b">Your provider could get bored and shut everything down! You could lose everything!</a></li>
<li><a href="#org4484377">There's no moderation!</a></li>
<li><a href="#org03710c1">There's too much moderation! Your provider could block an entire instance!</a></li>
<li><a href="#orgdf3efbf">I don't want to be siloed into an instance!</a></li>
</ul>
</div>
</div>
<p>
Apparently I care about this way more than I realized, because here I am with another hot take on Twitter vs. federation/Mastodon, and only four days after my last one. This actually started out as a Toot (a word that irrationally grates on me), but like a lot of writers, I'm prone to rambling, so here we are together, mired in another blog post. Welcome.
</p>

<p>
I'm starting to entertain the possibility that I abandoned social media mostly due to the platforms available, and feeling like my social graph, content, and activity, were being packed up for sale, and not wanting to endure hateful people with uninformed opinions that weren't even their own. Maybe in time I'll be proven wrong, but I don't feel like that's the case over in the fediverse — or at least you have more agency here.
</p>

<div class="org-center">
<p>
⚜
</p>
</div>

<p>
At this point, I'm mostly perusing Twitter to get the <a href="https://activitypub.rocks/">ActivityPub</a> handles for the people I'd like to reconnect with (I plan on closing my account after the election on Nov. 8th), but while over there, I'm still seeing people express concern about federation, and Mastodon in particular — sometimes quite vehemently, as if leaving was some kind of moral failing, or that it is offensive to suggest that <a href="https://en.wikipedia.org/wiki/The_Dark_Tower_(series)">there are other worlds than these</a>.
</p>

<p>
Some of the concerns are so bewildering to me, that — aside from prompting another post — it made me start wondering what people's motivations were for defending the platform so strongly. So far, here are my best guesses:
</p>

<ol class="org-ol">
<li>People who have built careers around their Twitter social graph are scrambling to maintain their graph and trying to convince their followers not to leave.</li>
<li>People who are familiar with (can I say maybe addicted to?) Twitter don't want to face the possibility of change.</li>
<li>People fundamentally misunderstand what Twitter is, and what is possible for social media to be.</li>
</ol>


<p>
There are of course lots of people using Twitter without getting caught up in the goings-on, but they're also not the people emphatically stating that there's nothing like Twitter in the world, and how <i>dare</i> you suggest otherwise.
</p>

<p>
Of the three motivations, only the third is interesting to me, because it's the only one which can be directly addressed with information. The other two are circumstantial, and certainly understandable.
</p>

<p>
So let's get into it: people are giving reasons for why switching over to a federated network, and Mastodon in particular, is a bad idea; here are my opinions on why these are rooted in misunderstanding.
</p>

<div class="org-center">
<p>
⚜
</p>
</div>


<div id="outline-container-org00ad441" class="outline-2">
<h2 id="org00ad441">Your provider could read your DMs and private posts!</h2>
<div class="outline-text-2" id="text-org00ad441">
<p>
This is also possible on Twitter. That so many don't understand this, and that politicians — famously ignorant of technology — seem to heavily use Twitter, worries me.
</p>

<p>
I think the strongest argument that can be made here is that with larger platforms, there are checks on this kind of power: policies, managers, governance teams, and regulations. But if that's your kind of thing, you can just choose a provider with similar <a href="https://mstdn.social/privacy-policy">terms of service</a>, pay <a href="https://masto.host/pricing/">$6/month</a> (less than Twitter's rumored $8/month by the way), or, if you're capable, host your own instance.
</p>
</div>
</div>

<div id="outline-container-orge192597" class="outline-2">
<h2 id="orge192597">Your provider can just delete your account!</h2>
<div class="outline-text-2" id="text-orge192597">
<p>
This is also possible on Twitter. In fact, there's an amusing trend happening right now of people leaving Twitter by making fun of its new owner. Their accounts are summarily suspended.
</p>

<p>
If you're concerned that your provider's admins are particular vindictive, or impulsive, migrate to a provider you're more comfortable with.
</p>
</div>
</div>

<div id="outline-container-org112733b" class="outline-2">
<h2 id="org112733b">Your provider could get bored and shut everything down! You could lose everything!</h2>
<div class="outline-text-2" id="text-org112733b">
<p>
Like Google+, Vine, <a href="https://en.wikipedia.org/wiki/List_of_defunct_social_networking_services">etc.</a>? Large, monolithic, platforms are not immune to this.
</p>

<p>
Mastodon has robust <a href="https://docs.joinmastodon.org/user/moving/#migration">migration capabilities</a>, and no incentive to dissuade users from using it. If you're using a smaller provider, and you're concerned about its staying power, find a larger provider that's unlikely to shutdown without notice.
</p>

<p>
But I think you should be comfortable even with the smaller providers. In my years of participating in communities around the internet, it's been my experience that administrators of smaller communities are no less considerate than companies when deciding to wind things down, often feel guilty for doing so, and try to give their community a lot of warning.
</p>

<p>
Generally speaking, people taking on the administrative burden of hosting a small community are doing so out of love and passion for the community they're participating in.
</p>

<p>
Still not convinced? Like any data you value, keep backups. You can <a href="https://docs.joinmastodon.org/user/moving/#export">export</a> all of your data, at any time.
</p>
</div>
</div>

<div id="outline-container-org4484377" class="outline-2">
<h2 id="org4484377">There's no moderation!</h2>
<div class="outline-text-2" id="text-org4484377">
<p>
This is plainly false. Provider administrators are doing plenty of moderation, including blocking providers which serve host to hateful, extremist, communities.
</p>

<p>
One of the benefits of the federated model is that, in addition to having agency over what you personally see, you might join a provider which carries a torch for a specific cohort you identify with. Not only can they keep your experience with others using the same provider friendly, they can take action against other providers which have demonstrated that they are acting in bad faith.
</p>

<p>
Lots of distributed communities are grappling with this at the moment, but my favorite take on this comes from <a href="https://element.io/blog/moderation-needs-a-radical-change/">Matrix</a> (another federated platform): a bottom-up, federated, moderation platform with plenty of knobs for folks to turn to get things right for smaller groups of people.
</p>

<p>
Finally, without belittling the hard work moderation teams at companies do, I would not hold large social networks like Twitter up as paragons of content moderation by which everything else is measured.
</p>
</div>
</div>

<div id="outline-container-org03710c1" class="outline-2">
<h2 id="org03710c1">There's too much moderation! Your provider could block an entire instance!</h2>
<div class="outline-text-2" id="text-org03710c1">
<p>
Unless you're using a provider which is overzealous, as stated in the last point, I think this is a good thing. If you feel they're casting too wide a net (can you guess it?), migrate to a different provider.
</p>
</div>
</div>

<div id="outline-container-orgdf3efbf" class="outline-2">
<h2 id="orgdf3efbf">I don't want to be siloed into an instance!</h2>
<div class="outline-text-2" id="text-orgdf3efbf">
<p>
Let me see if I understand this: you fear not being able to interact with people regardless of where they choose to spend their time, and your solution is&#x2026; to use a platform that people must join to interact with you?
</p>

<p>
I think the strongest argument that can be made here is that yes, Twitter is a silo, but it's a really <i>big</i> silo! OK, but then why not make the big silo a <i>really</i> big provider of a federated platform? Like Gmail is for email.
</p>

<p>
Most likely, this is just a fundamental misunderstanding of the federated model. That's understandable when most people have been primarily exposed to the walled gardens of the past two decades.
</p>

<div class="org-center">
<p>
⚜
</p>
</div>

<p>
So why am I suddenly shilling for Mastodon; does any of this really matter?
</p>

<p>
Yes, and no. Insofar as <a href="https://en.wikipedia.org/wiki/Absurdism">anything can have meaning</a>, there are certainly <a href="https://www.charitynavigator.org/discover-charities/where-to-give/ukranian-crisis/">more</a> <a href="https://transequality.org/action-centers">important</a> <a href="https://www.charitynavigator.org/discover-charities/where-to-give/voting-rights/">issues</a> to focus on, but to rephrase what I said in my last post, for better or worse, humanity has invented and uses social media, and a lot of other important issues are affected by what happens there. So yeah, it kind of does matter.
</p>

<p>
And besides, wouldn't it be nice to claw back some agency from the ads and algorithms? We could have nice things, dear reader. Not perfect, but nice.
</p>
</div>
</div>

    </div>
  </div>
</div> <!-- /.container -->
]]></description>
      <pubDate>2022-11-05</pubDate>
      <guid>http://katherine.cox-buday.com/blog/2022/11/05/is-migrating-from-twitter-to-mastodon-risky/</guid>
    </item>
    <item>
      <title>On Twitter&#39;s Acquisition, and Leaving</title>
      <link>http://katherine.cox-buday.com/blog/2022/11/01/on-twitters-acquisition-and-leaving/</link>
      <description><![CDATA[<div class="post">
  <div class="col-sm-3 right-align post-meta">
    <h3>&nbsp;<!-- Placeholder for alignment with post --></h3>
  </div>
  <div class="col-sm-9">
    <div class="post">
      <h3>On Twitter&#39;s Acquisition, and Leaving</h3>
      <p>
Since Twitter changed hands, I've seen calls for people to remain on the platform in an effort to not cede it to those with extremist views, and to keep communities connected. Although worthy goals, I don't think remaining on the platform is a great idea, and I wanted to share my opinion in the hopes it will influence people, communities, and public services, to change how they engage with society.
</p>

<p>
This is an odd issue for me to take a stance on because I abandoned social media awhile ago. It's unclear to me that its benefits outweigh its risks to society<sup><a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup>. As a life-long netizen who has benefited immensely from online spaces over the years, I also understand that these spaces are important, and that for many, a vital and sometimes life-saving alternative to the real world. I'm just not sure about social media in it's current form. Still, a lot of people like and use it, and what happens with Twitter will impact me, indirectly. So onto the question: why shouldn't people stay?
</p>

<div class="org-center">
<p>
⚜
</p>
</div>

<p>
The value in Twitter, and any social media network, comes from the people who engage with it. These networks don't produce any content; that comes from you. And you wouldn't put content into the network unless you thought someone was going to read it. It's a positive feedback loop: the more you feed the machine, the more valuable the machine becomes, to the public, and, more importantly, to those who control it. In Twitter's case, one person now controls it, and the people he borrowed money from control him. Is this is the platform we want to be society's "town square"? To host our political discourse? To hear from our public servants?
</p>

<p>
If you fear Twitter becoming a mouthpiece for extremism, disinformation, and mass manipulation, the best way to resist isn't to stay, it's to exit the platform. With fewer accounts, there will be fewer people feeding it content, and less reason for those who remain to do so: a negative feedback loop. Its importance will wane. Starved and spiraling, it will cease to be the "town square", and like many social networks before it, it will fade away. Remaining, at best, ensures the platform retains its status, and — if your fears are true — thus ensures extremism, disinformation, and mass manipulation have an audience.
</p>

<p>
If you fear your community fracturing, I don't think there's a way to stop this. This acquisition has already driven people away, and it will continue to do so. The best way to keep communities connected, and to ensure this doesn't happen again, is to reform the community around a platform where this type of thing could never happen in the first place, and then exiting the one where it did. Even if you somehow avoid shedding community members, the risk remains going forward: someone you don't trust is dictating the rules, and the community could disband or involuntarily be disbanded at any point.
</p>

<p>
Which brings me to my most important point: trying to resist within a system of rules your opponent dictates is pointless. You can tweet the best take-down of Twitter ever written, and they can ensure no one sees it. You can start a banging hashtag campaign, and they can ensure no one sees it. You can confront disinformation and offer insight into why it's untrue, and their algorithm can make sure no one sees it. They can outright delete your account: the tool you've chosen for resisting. You have no agency from which to resist.
</p>

<p>
For example, I've seen claims that leaving now is disrupting the means of mass communication right before what's expected to be a tumultuous US election. Setting aside the fact that Twitter isn't the only way people communicate en masse, if that's something important to you, why would you want to depend on a platform you have no confidence in? Wouldn't it be <i>more</i> important to start building your network on something you know won't be manipulating its users?
</p>

<p>
Wasn't there an entire <a href="https://en.wikipedia.org/wiki/The_Matrix">movie</a> about this? Wasn't the problem that trying to resist from within was pointless? Wasn't the solution to exit? Exit.
</p>

<div class="org-center">
<p>
⚜
</p>
</div>

<p>
If you agree, but are unsure what to do, here are some suggestions:
</p>

<ul class="org-ul">
<li>Join a federated network.
These operate like email: every member can interact with every other member, regardless of which provider they use. There are many more benefits (and some drawbacks), but it removes any private, central, control on what has become an important substrate of our society. I suggest <a href="https://joinmastodon.org/servers">Mastadon</a>. From what I'm told, it doesn't behave exactly like Twitter, but it's a functioning, useful, social network.</li>
<li>As I have for this post, practice <a href="https://indieweb.org/POSSE">POSSE</a> (Publish (on your) Own Site, Syndicate Elsewhere). The linked site has a great breakdown of why this is useful, including a point on "Friends are more important than federation".</li>
<li>Support <a href="https://www.eff.org/deeplinks/2021/06/access-act-takes-step-towards-more-interoperable-future">political efforts</a> which require platforms to federate.</li>
</ul>


<p>
And, next time a curmudgeon like me <a href="https://usesthis.com/interviews/katherine.cox-buday/">blathers on</a> about standards, protocols, ownership, and openness, consider that there may be a horizon, closer now than you think, where these things might be important, and in ways you didn't anticipate. And that <a href="https://www.cnet.com/culture/how-twitter-replaced-my-rss-reader/">the present convenience</a> won't be worth what we're giving up.
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
In <a href="https://openlibrary.org/works/OL20730900W/How_to_Do_Nothing">How to Do Nothing</a>, Jenny Odell makes a compelling case that our attention is one of the few remaining commodities individuals have left to affect change, and that increasingly people are spending that attention engaging with inflammatory content on social media, while not actually doing anything substantive. I'm probably not representing her excellent and nuanced points well, so if that strikes a chord with you, go read the book.
</p></div></div>


</div>
</div>
    </div>
  </div>
</div> <!-- /.container -->
]]></description>
      <pubDate>2022-11-05</pubDate>
      <guid>http://katherine.cox-buday.com/blog/2022/11/01/on-twitters-acquisition-and-leaving/</guid>
    </item>
    <item>
      <title>Trying OpenCL on Guix: An Experience Report</title>
      <link>http://katherine.cox-buday.com/blog/2021/07/05/trying-opencl-on-guix-an-experience-report/</link>
      <description><![CDATA[<div class="post">
  <div class="col-sm-3 right-align post-meta">
    <h3>&nbsp;<!-- Placeholder for alignment with post --></h3>
  </div>
  <div class="col-sm-9">
    <div class="post">
      <h3>Trying OpenCL on Guix: An Experience Report</h3>
      <p>
Recently, I wanted to run <a href="https://github.com/leela-zero/leela-zero">Leela Zero</a> with <a href="https://github.com/bernds/q5Go">q5go</a> to help me get better at playing Go. I run <a href="https://guix.gnu.org/">GNU Guix</a> on my machine, and so I did the following: <code>guix package -i leela-zero gnugo q5go</code>. This got <code>q5go</code> going and I was able to point it at Leela Zero (<code>~/.guix-profile/bin/leelaz</code>) as an analysis engine; however, it does not work. Here is my experience determining why.
</p>

<p>
Like many machine learning programs, Leela Zero can optionally use your GPU utilizing OpenCL to drastically speed up its operations per second. Unfortunately, invoking <code>leelaz</code> with <code>leelaz --gtp</code> wasn't working for me. If I invoked Leela Zero like this: <code>leelaz --cpu-only</code> it worked, but took a long time to analyze moves. This suggested to me that it was an issue with my OpenCL setup. We can use the <code>clinfo</code> program to troubleshoot this.
</p>

<div class="org-src-container">
<pre class="src src-shell">guix environment --ad-hoc clinfo -- clinfo
</pre>
</div>

<pre class="example">
Number of platforms                               0
</pre>


<p>
This strongly suggests there is something wrong with Guix's OpenCL setup. We can use <code>strace</code> to learn more.
</p>

<div class="org-src-container">
<pre class="src src-shell">guix environment --ad-hoc strace clinfo -- strace -o/dev/stdout -eopenat clinfo
</pre>
</div>

<pre class="example">
openat(AT_FDCWD, "/gnu/store/2ax9z25142khhqx61ks767jr758pzq5r-clinfo-3.0.21.02.21/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
openat(AT_FDCWD, "/gnu/store/i70jq190cpc45crbnrw8g8lgb4djyi9r-opencl-icd-loader-2021.06.30/lib/libOpenCL.so.1", O_RDONLY|O_CLOEXEC) = 3
openat(AT_FDCWD, "/gnu/store/5h2w4qi9hk1qzzgi1w83220ydslinr4s-glibc-2.33/lib/libdl.so.2", O_RDONLY|O_CLOEXEC) = 3
openat(AT_FDCWD, "/gnu/store/094bbaq6glba86h1d4cj16xhdi6fk2jl-gcc-10.3.0-lib/lib/libgcc_s.so.1", O_RDONLY|O_CLOEXEC) = 3
openat(AT_FDCWD, "/gnu/store/5h2w4qi9hk1qzzgi1w83220ydslinr4s-glibc-2.33/lib/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
openat(AT_FDCWD, "/gnu/store/5h2w4qi9hk1qzzgi1w83220ydslinr4s-glibc-2.33/lib/libpthread.so.0", O_RDONLY|O_CLOEXEC) = 3
openat(AT_FDCWD, "/etc/OpenCL/vendors", O_RDONLY|O_NONBLOCK|O_CLOEXEC|O_DIRECTORY) = -1 ENOENT (No such file or directory)
Number of platforms                               0
+++ exited with 0 +++
</pre>


<p>
Despite <code>mesa-opencl</code> being installed in the system profile, Guix had not populated <code>/etc/OpenCL</code> from the package. It is, however present:
</p>

<div class="org-src-container">
<pre class="src src-shell">find -L /run/current-system/profile -name OpenCL
</pre>
</div>

<pre class="example">
/run/current-system/profile/etc/OpenCL
</pre>


<p>
This is mystery number one: why isn't this being populated into Guix's root <code>/etc</code>?
</p>

<p>
Pointing <code>clinfo</code> at the vendors directory can be achieved with the <code>OPENCL_VENDOR_PATH</code> environmental variable. The contents of this file are:
</p>

<div class="org-src-container">
<pre class="src src-shell">cat /run/current-system/profile/etc/OpenCL/vendors/mesa.icd
</pre>
</div>

<pre class="example">
/gnu/store/48qh6x7ky8r1cxbfalwzngch4hgnrrr9-mesa-opencl-icd-21.3.8/lib/libMesaOpenCL.so.1
</pre>


<p>
By running <code>strace</code>, we can see that despite <code>mesa-opencl-icd</code> being installed in the system's profile, it cannot find the location of the library:
</p>

<div class="org-src-container">
<pre class="src src-shell">OPENCL_VENDOR_PATH=/run/current-system/profile/etc/OpenCL/vendors guix environment --ad-hoc strace clinfo -- strace -o/dev/stdout -eopenat clinfo
</pre>
</div>

<pre class="example">
openat(AT_FDCWD, "/gnu/store/2ax9z25142khhqx61ks767jr758pzq5r-clinfo-3.0.21.02.21/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
openat(AT_FDCWD, "/gnu/store/i70jq190cpc45crbnrw8g8lgb4djyi9r-opencl-icd-loader-2021.06.30/lib/libOpenCL.so.1", O_RDONLY|O_CLOEXEC) = 3
openat(AT_FDCWD, "/gnu/store/5h2w4qi9hk1qzzgi1w83220ydslinr4s-glibc-2.33/lib/libdl.so.2", O_RDONLY|O_CLOEXEC) = 3
openat(AT_FDCWD, "/gnu/store/094bbaq6glba86h1d4cj16xhdi6fk2jl-gcc-10.3.0-lib/lib/libgcc_s.so.1", O_RDONLY|O_CLOEXEC) = 3
openat(AT_FDCWD, "/gnu/store/5h2w4qi9hk1qzzgi1w83220ydslinr4s-glibc-2.33/lib/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
openat(AT_FDCWD, "/gnu/store/5h2w4qi9hk1qzzgi1w83220ydslinr4s-glibc-2.33/lib/libpthread.so.0", O_RDONLY|O_CLOEXEC) = 3
openat(AT_FDCWD, "/etc/OpenCL/vendors", O_RDONLY|O_NONBLOCK|O_CLOEXEC|O_DIRECTORY) = -1 ENOENT (No such file or directory)
Number of platforms                               0
+++ exited with 0 +++
</pre>


<p>
It is, however, present:
</p>

<div class="org-src-container">
<pre class="src src-shell">find -L /run/current-system/profile -name libMesaOpenCL.so.1
</pre>
</div>

<pre class="example">
/run/current-system/profile/lib/libMesaOpenCL.so.1
</pre>


<p>
This is mystery number two: why can't Guix locate the library?
</p>

<p>
If we create our own vendors file, populate it with the location of the <code>libMesaOpenCL.so</code> file, and point <code>clinfo</code> at this, things begin to look better.
</p>

<div class="org-src-container">
<pre class="src src-shell">cat ${HOME}/.local/etc/OpenCL/vendors/mesa.icd
</pre>
</div>

<pre class="example">
/run/current-system/profile/lib/libMesaOpenCL.so.1
</pre>


<div class="org-src-container">
<pre class="src src-shell">OPENCL_VENDOR_PATH=${HOME}/.local/etc/OpenCL/vendors clinfo
</pre>
</div>

<pre class="example">
Number of platforms                               0
</pre>


<p>
However, Leela Zero is still not working:
</p>

<div class="org-src-container">
<pre class="src src-shell">OPENCL_VENDOR_PATH=${HOME}/.local/etc/OpenCL/vendors leelaz --tune-only 2&gt;&amp;1 || true
</pre>
</div>

<pre class="example">
A network weights file is required to use the program.
By default, Leela Zero looks for it in /home/katco/.local/share/leela-zero/best-network.
</pre>


<p>
There is a curious error from the output of <code>clinfo</code>:
</p>

<p>
<code>Preferred work group size multiple              &lt;getWGsizes:1200: create kernel : error -46&gt;</code>
</p>

<p>
If we set the <code>LD_DEBUG</code> environment variable to <code>libs</code>, we can shed some light as to what is wrong:
</p>

<div class="org-src-container">
<pre class="src src-shell">OPENCL_VENDOR_PATH=${HOME}/.local/etc/OpenCL/vendors LD_DEBUG=libs clinfo 2&gt;&amp;1 |grep error
</pre>
</div>

<p>
Indeed, this file is not present.
</p>

<div class="org-src-container">
<pre class="src src-shell">[ -f /gnu/store/h86b3253bc3mnp3p57n1vls2vkfv2h6z-libclc-9.0.1/share/clc/gfx1010-amdgcn-mesa-mesa3d.bc ]
echo $?
</pre>
</div>

<pre class="example">
1
</pre>


<p>
Further research turned up a bug (<a href="https://bugs.llvm.org/show_bug.cgi?id=44841">44841</a>) against <code>libclc</code> which suggests that while support for my card was included into LLVM v10 (at the time of this writing, LLVM has released v12), <code>libclc</code> does not support my card's architecture, <code>gfx1010</code>.
</p>

<p>
I attempted to build libclc v12.0.0 locally, but it segfaulted. Building v11.0.0 worked, but as suggested by the open bug, support for my card's architecture still has not been implemented.
</p>

<p>
I briefly entertained creating a Guix package from AMD's <code>amdgpu-pro</code> <a href="https://www.amd.com/en/support/kb/release-notes/rn-radpro-lin-16-40">packages</a>, but it appears as though my card is not supported, and according to a bug (<a href="https://github.com/RadeonOpenCompute/ROCm/issues/819">819</a>) against ROCm, likely won't be.
</p>

<p>
So it would seem I'm out of luck, and I'm stuck running Leela Zero on the CPU for now. Analyzing one of my games on 60 compute cores took somewhere around ten minutes, so not intractable.
</p>

<p>
Still, perhaps this helps others running Guix with GPUs that are supported by <code>libclc</code>.
</p>

<p>
As an aside, this research is perhaps an indication of why — despite my years of interest in Go — I remain a Kyu player.
</p>

    </div>
  </div>
</div> <!-- /.container -->
]]></description>
      <pubDate>2021-07-05</pubDate>
      <guid>http://katherine.cox-buday.com/blog/2021/07/05/trying-opencl-on-guix-an-experience-report/</guid>
    </item>
    <item>
      <title>The Utility of a Cup</title>
      <link>http://katherine.cox-buday.com/blog/2018/07/18/the-utility-of-a-cup/</link>
      <description><![CDATA[<div class="post">
  <div class="col-sm-3 right-align post-meta">
    <h3>&nbsp;<!-- Placeholder for alignment with post --></h3>
  </div>
  <div class="col-sm-9">
    <div class="post">
      <h3>The Utility of a Cup</h3>
      <p>
For awhile now, I've wanted to write about my experiences writing <a href="https://katherine.cox-buday.com/concurrency-in-go">Concurrency in Go</a>. I want to write about what it was like to write a technical book, how I did it, and how I felt about it afterwards. This piece of writing will be about that last bit: how I feel having successfully written the book.
</p>

<p>
When my part was finished, and I was informed that the book was going to print, the first thing I remember feeling is enormous relief. To understand why, I need to reveal a bit about what kind of frame of mind I was in.
</p>

<p>
In 2015, I pitched the idea to O'Reilly, and eventually came to an agreement to write the book. At the time, my daughter was barely walking, and we were living in a house in which I had an office. I was managing a team at <a href="https://canonical.com">Canonical</a> where we were writing a lot of Go, and generally enjoying life.
</p>

<p>
After I had decided to write the book, a number of things happened from early 2016 into mid 2017 that made writing the book significantly more challenging:
</p>

<ul class="org-ul">
<li>My daughter got older and began needing much more supervision than I realized she'd need.</li>
<li>For three unrelated and equally serious reasons, the location our house was in became unsafe to live in, and we had to sell it.</li>
<li>We moved into a small apartment on the first floor of an old home. I lost an office space, and interruptions outside of working hours increased dramatically. A year into living there, we were also surprised with new neighbors upstairs, three young women. They were very loud, and regularly prevented us from sleeping. At night, we'd hear gunshots &#x2013; something I was unaccustomed to. Our garage was broken into. During the summer of 2016, a crime spree broke out in our neighborhood. People were being carjacked, forced to drive to withdraw money from ATMs, and sometimes assaulted or killed. We stopped going out after dark, and this effectively eliminated my exercise routine.</li>
<li>A presidential election happened. Fear crept into my psyche, and set up shop.</li>
<li>We couldn't find a house we liked and so decided to try and build one. We bought some land.</li>
<li>There were massive reorganizations at Canonical, and my team was dissolved. I became a software engineer once more (this part was cool!), and was placed on a new team.</li>
<li>Eventually Canonical's 2017 round of layoffs happened. My entire team and I were unexpectedly let go.</li>
<li>A job search ensued, and I found <a href="https://simple.com">Simple</a> (this part was also good!).</li>
<li>For various reasons, we abandoned the idea of building a house, and sold the land.</li>
</ul>

<p>
I am always very reticent to claim hardship in life &#x2013; there are people who have much different and much more serious problems than I do &#x2013; but this sequence of events ground me down like a pestle working a bit of spice. There were no nights off, there were no weekends off, and writing in the apartment was rarely an option<sup><a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup>. I sacrificed a lot of time with my family, and much of the time I was afraid. It is only in retrospect that I realize I was severely burnt out. Fear is the mind killer.
</p>

<p>
Although I didn't realize why, I began withdrawing from different spaces, and limiting my activities. I now know that I was trying to simplify; to give myself time and space to claw some sense of normalcy back. I quit Twitter, I stopped updating my website. Personal projects were put on hold. I withdrew.
</p>

<hr>

<p>
Occasionally I flip through the Tao Te Ching. I first learned of its existence in high school when we were covering eastern philosophy, and I remember immediately agreeing with a core truth in the philosophy of Taoism: that everything comes in pairs<sup><a id="fnr.2" class="footref" href="#fn.2" role="doc-backlink">2</a></sup>. Light and dark, dry and wet, and so on. Laozi, author of the Tao Te Ching, has a way of distilling problems down into their most base components, and offering equally simple advice.
</p>

<p>
And so, one night, a couple of months after the book had been published, I was searching through the Tao Te Ching for a bit of wisdom on the matter. I wanted insight into how I was feeling, and maybe some advice on how to fix it. That's when I came across this passage:
</p>

<blockquote>
<p>
We join spokes together in a wheel,
but it is the center hole
that makes the wagon move.
We shape clay into a pot,
but it is the emptiness inside
that holds whatever we want.
We hammer wood for a house,
but it is the inner space
that makes it livable.
We work with being,
but non-being is what we use.
</p>
</blockquote>

<p>
This reminded me of <a href="http://www.ashidakim.com/zenkoans/1acupoftea.html">a Zen Koan</a> I had once read:
</p>

<blockquote>
<p>
Nan-in, a Japanese master during the Meiji era (1868-1912), received a university professor who came to inquire about Zen.
</p>

<p>
Nan-in served tea. He poured his visitor's cup full, and then kept on pouring.
</p>

<p>
The professor watched the overflow until he no longer could restrain himself. "It is overfull. No more will go in!"
</p>

<p>
"Like this cup," Nan-in said, "you are full of your own opinions and speculations. How can I show you Zen unless you first empty your cup?"
</p>
</blockquote>

<p>
And finally, a wonderful quote from Bruce Lee:
</p>
<blockquote>
<p>
The usefulness of a cup is in its emptiness.
</p>
</blockquote>

<p>
If I were to draw inspiration from Laozi, and distill how I felt after completing the book into the simplest expression, it would be this: my cup was full. It was so full, I had no room for curiosity, for wonder, or for learning. This is why I had withdrawn: to empty my cup.
</p>

<p>
At the time of this writing it's been almost a year since "Concurrency in Go" has been published. I'm very happy to say that I have begun to feel like I have a little more room in my cup. We're now living in a safe and quiet house. I've completed quite a few projects to establish a fun home computing lab, with more private and public projects in the pipeline (this post was one of them!). I have an office again. And this space is giving me the strength to face some of the fear I've had since the election, and to develop ideas for helping others. I'm doing good.
</p>

<p>
And with this space, I am finally able to reflect on how I feel having written the book. At the end of the day, am I happy I decided to write this book? Yes; I am very happy to have written Concurrency in Go. In its preface I say:
</p>

<blockquote>
<p>
I wanted the community to have access to high-quality and comprehensive information about concurrency in Go&#x2026;
</p>
</blockquote>

<p>
That altruistic justification still rings true, and since the book was published, I've had several people tell me how much it has helped them. It may have been a difficult journey, but the destination has been worth it.
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
It's for this reason that in my acknowledgments I thank the wonderful St. Louis library system! Support your libraries!
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2" role="doc-backlink">2</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
I have often wondered how qubits might be regarded under Taoism.
</p></div></div>


</div>
</div>
    </div>
  </div>
</div> <!-- /.container -->
]]></description>
      <pubDate>2018-07-18</pubDate>
      <guid>http://katherine.cox-buday.com/blog/2018/07/18/the-utility-of-a-cup/</guid>
    </item>
    <item>
      <title></title>
      <link>http://katherine.cox-buday.com/concurrency-in-go/</link>
      <description><![CDATA[<div class="post">
  <div class="col-sm-3 right-align post-meta">
    <h3>&nbsp;<!-- Placeholder for alignment with post --></h3>
  </div>
  <div class="col-sm-9">
    <div class="post">
      <h3></h3>
      
<div id="orgce6d8ef" class="figure">
<p><img src="/assets/concurrency-in-go/book-cover.jpg" alt="book-cover.jpg" class="img-responsive pull-left" style="margin-right:15px; width:250px" />
</p>
</div>

<p>
Concurrency can be notoriously difficult to get right, but fortunately, the Go programming language was designed with concurrency in mind. In this practical book, you’ll learn how Go was written to help introduce and master these concepts, as well as how to use basic concurrency patterns to form large systems that are reliable and remain simple and easy to understand.
</p>

<p>
Author Katherine Cox-Buday takes you through the tools and techniques to develop and debug concurrent software. After finishing Concurrency in Go, you’ll be equipped with the skills you need to confidently and correctly write concurrent systems of any size.
</p>

<p>
[<a href="https://github.com/kat-co/concurrency-in-go-src">Source Code</a>] [<a href="http://www.oreilly.com/catalog/errata.csp?isbn=0636920046189">Errata</a>]
</p>
<div class="clearfix"></div>

<div id="outline-container-orga76a3b2" class="outline-2">
<h2 id="orga76a3b2">Available for Purchase</h2>
<div class="outline-text-2" id="text-orga76a3b2">
<ul class="org-ul">
<li><a href="http://www.ebooks.com/95820962/concurrency-in-go/cox-buday-katherine/">ebooks.com</a> (DRM free!)</li>
<li><a href="https://www.amazon.com/gp/product/1491941197/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;tag=katherinecoxb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=1491941197&amp;linkId=50618894344eaf64dbf967755272d941">Amazon</a></li>
<li><a href="http://www.barnesandnoble.com/w/concurrency-in-go-katherine-cox-buday/1123863796">Barnes &amp; Noble</a></li>
<li>A local independent bookstore near you!</li>
</ul>
</div>
</div>

    </div>
  </div>
</div> <!-- /.container -->
]]></description>
      <pubDate>2017-12-03</pubDate>
      <guid>http://katherine.cox-buday.com/concurrency-in-go/</guid>
    </item>
    <item>
      <title>On Perfectionism</title>
      <link>http://katherine.cox-buday.com/blog/2015/03/02/on-perfectionism/</link>
      <description><![CDATA[<div class="post">
  <div class="col-sm-3 right-align post-meta">
    <h3>&nbsp;<!-- Placeholder for alignment with post --></h3>
  </div>
  <div class="col-sm-9">
    <div class="post">
      <h3>On Perfectionism</h3>
      <p>
I recently came across this Tweet:
</p>

<blockquote class="twitter-tweet" lang="en"><p><a href="http://t.co/meyTVhEscW">http://t.co/meyTVhEscW</a> <a href="http://t.co/VyIujIx2dZ">pic.twitter.com/VyIujIx2dZ</a></p>&mdash; Paul Baumgart (@paulbaumgart) <a href="https://twitter.com/paulbaumgart/status/571788242174918656">February 28, 2015</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>
I've spent most of my career in the financial industry. There, it was unacceptable to release code which didn't work, and acceptable for the time between releases to span months; because if you got something wrong, it could have led to significant financial losses. It was a different type of job, and discussion of the pros/cons of this type of environment is probably outside the scope of this post.
</p>

<p>
I've changed jobs now, but I'm still trying to shake one of the detrimental habits the financial industry trained me into: perfectionism.
</p>

<p>
Now admittedly, I can't rest <i>all</i> of the blame on my previous job. Perfectionism is something that's innate to my character as well. Perhaps working in that type of environment just helped further crystallize a way of working.
</p>

<p>
And it's not all bad. It's partially what drives me: the desire to release pristine code leads to (what I consider) some nice patches and projects. It is sometimes the driving force behind <i>starting</i> some changes. It can be a really positive thing.
</p>

<p>
But it can also be negative.
</p>

<p>
The Open Source mantra is, "Release early; release often." I think the justification lies within the parable from this tweet. Humans are really good at modeling the future &#x2013; it's what makes us the dominant species on Earth. But when working with things as complex as software, this modeling has limits. The better way to work is to make mistakes as fast as possible, and iterate towards perfection.
</p>

<p>
I have found myself trying to get everything perfect before pushing changes up to their respective repositories. And sometimes I even find this blocking me from getting started. <i>All</i> the different approaches, their pros and cons, possible edge cases: they're all floating around in my mind, and it's difficult to just get started and get something working. Usually once I do get a bit of code written, I'm off and away and things are fine, but sometimes it's hard to get past that first block.
</p>

<p>
Those familiar with perfectionism are probably nodding their heads. It's a well understood problem, and there are some things you can do to try and get past it.
</p>

<p>
In the context of software engineering, one thing I've found that helps is to write tests. Tests are usually much more plain, and are &#x2013; by design &#x2013; meant to test one thing at a time. If edge-cases appear, you should probably write a test for that anyway, and so you can get a fair amount of work by simply building out the scaffolding of the program by writing tests. This gets you to lay down some code, and possibly removes the mental block.
</p>

<p>
I haven't found any other useful ways to resist the siren call of perfectionism (indeed I'm having trouble getting this post out!), but I at least thought this tweet would be a friendly reminder as to why it's better to fail as fast as you can.
</p>

    </div>
  </div>
</div> <!-- /.container -->
]]></description>
      <pubDate>2017-01-23</pubDate>
      <guid>http://katherine.cox-buday.com/blog/2015/03/02/on-perfectionism/</guid>
    </item>
    <item>
      <title>Gorkin: An Experiment with Cucumber &amp; BDD</title>
      <link>http://katherine.cox-buday.com/blog/2015/07/09/gorkin-an-experiment-with-cucumber-&amp;-bdd/</link>
      <description><![CDATA[<div class="post">
  <div class="col-sm-3 right-align post-meta">
    <h3>&nbsp;<!-- Placeholder for alignment with post --></h3>
  </div>
  <div class="col-sm-9">
    <div class="post">
      <h3>Gorkin: An Experiment with Cucumber &amp; BDD</h3>
      <iframe width="560" height="315" src="https://www.youtube.com/embed/RuFrIq0f5Es" frameborder="0" allowfullscreen></iframe>

<p>
(<a href="https://github.com/kat-co/gorkin">repository</a>)
</p>

    </div>
  </div>
</div> <!-- /.container -->
]]></description>
      <pubDate>2017-01-20</pubDate>
      <guid>http://katherine.cox-buday.com/blog/2015/07/09/gorkin-an-experiment-with-cucumber-&amp;-bdd/</guid>
    </item>
    <item>
      <title>An Argument for Parameter Validation</title>
      <link>http://katherine.cox-buday.com/blog/2014/07/31/an-argument-for-parameter-validation/</link>
      <description><![CDATA[<div class="post">
  <div class="col-sm-3 right-align post-meta">
    <h3>&nbsp;<!-- Placeholder for alignment with post --></h3>
  </div>
  <div class="col-sm-9">
    <div class="post">
      <h3>An Argument for Parameter Validation</h3>
      <p>
I'm a fan of validating parameters in languages which do not have preconditions.
</p>

<p>
First, let's define what I mean when I say validation.
</p>
<pre class="example">
Parameter validation is ensuring the things you utilize are in a state in which you can use them.
</pre>

<p>
Many people hear parameter validation and immediately jump to this:
</p>

<div class="org-src-container">
<pre class="src src-java">public void AnImportantMethod(report Report, author Author, repository Repository) {
    if(report == null)
      throw new NullPointerException("report");
    if(author == null)
      throw new NullPointerException("author");
    if(repository == null)
      throw new NullPointerException("repository");


    // Finally, our code!
    // ...
}
</pre>
</div>

<p>
Although checking for null values is a large responsibility of validating parameters, parameter validation isn't constrained to this. If you accept an integer, but want to make sure it falls within a range, that's parameter validation. If you want to ensure the object you're passed is in a known/correct state, that's parameter validation. If you want to make sure your business-object adheres to business rules that pertain to what you're going to do, that's parameter validation.
</p>

<p>
A code-base of any decent side will have disparate subsystems in various states of coupling. The way these systems interact can be subtle, and the data they share can have an infinite domain (strings, numbers), or at least be very complex (classes which break the law of demeter &#x2013; admit it, you have a few). Rather than try and reason about your entire code-base as a whole, I find it much easier to worry about the one thing my component is doing, and make sure it has everything it needs before getting started. So how do you go about this?
</p>

<p>
When reasoning about the correctness of your data, you have a few options:
</p>

<ol class="org-ol">
<li>Relying on the fact that the data was generated and transformed correctly everywhere else.</li>
<li>Defining coarse boundaries and validating data there (think user-input coming in).</li>
<li>Validating the data right before you use it.</li>
</ol>

<p>
Which should you choose?
</p>

<p>
Let's get a little philosophical. The ways in which the code boundary you are guarding are interacted with are discrete and finite at this moment in time. Let's call that number A. If you're lucky, perhaps A is some small number &#x2013; perhaps even 1 &#x2013; and you can reason about what data makes it across your code boundary.
</p>

<p>
But over time, A will change in ways you cannot predict (if you can, talk to me, and we'll make lots of money together). Architecture will change, the scope of your boundary might expand, the permutations that create your arguments might blow your data's domain out to some large number, code that didn't even exist might begin lobbing bytes across: you just don't know.
</p>

<p>
So perhaps it's because I'm paranoid, but I like to validate my inputs as close to their use as possible. The boundary I usually choose is methods. At the beginning of every method I do any validation I need to do to ensure that I at least started in a known state.
</p>

<p>
There are advantages and disadvantages to this technique.
</p>

<div id="outline-container-org1a5604c" class="outline-2">
<h2 id="org1a5604c">Advantages</h2>
<div class="outline-text-2" id="text-org1a5604c">
<ol class="org-ol">
<li><p>
<b>Adherence to the <a href="http://en.wikipedia.org/wiki/Fail-fast">Fail Fast principle</a>.</b>
</p>

<p>
Don't know why that's a good thing? Check out <a href="http://www.martinfowler.com/ieeeSoftware/failFast.pdf">this</a> great article.
</p></li>

<li><p>
<b>Complete Coverage</b>
</p>

<p>
No matter how your code is called, it will be validated.
</p></li>

<li><p>
<b>Code Contracts</b>
</p>

<p>
If I'm calling this code, what can I pass in? Are nulls OK? If I'm reading the code, this gives me an indication. If I'm calling the code, I know right away.
</p></li>
</ol>
</div>
</div>

<div id="outline-container-org1dd83c4" class="outline-2">
<h2 id="org1dd83c4">Disadvantages</h2>
<div class="outline-text-2" id="text-org1dd83c4">
<ol class="org-ol">
<li><p>
<b>Performance</b>
</p>

<p>
If you call a guarded block of code repeatedly, validation can slow your program down demonstrably; however, this is an edge case and you shouldn't discard the entire concept of parameter validation at the altar of premature optimization.
</p></li>

<li><p>
<b>Verbosity</b>
</p>

<p>
It's extra lines of code &#x2013; no way around it &#x2013; however, given the potential benefit, this disadvantage seems insignificant. Further, there's ways to even further minimize this downside discussed below.
</p></li>

<li><p>
<b>Duplication of Effort</b>
</p>

<p>
This is the one I struggle with most. How many times are you going to check that an instance of a string is not empty before you believe it? There's some truth to this, but only in the simple case. As mentioned above, what string you are passed could change in the future; so in a sense we are guarding against the domain of values, not specific instances.
</p></li>
</ol>
</div>
</div>

<div id="outline-container-org95800ca" class="outline-2">
<h2 id="org95800ca">Smart Parameter Validation</h2>
<div class="outline-text-2" id="text-org95800ca">
<p>
A long chain of if statements at the beginning of your code is cumbersome to write and maintain. It's prone to bugs, and it can actually hide incorrect parameters which are checked after other failing parameters. Do your parameter validation smarter:
</p>

<div class="org-src-container">
<pre class="src src-go">func PersistCreeps(dataStore io.Writer, creeps []*game.Creep) error {

    BeginValidation().Validate(
        IsNotNil(dataStore, "dataStore"),
        IsNotNil(creeps, "creeps"),
    ).CheckAndPanic().Validate(
        GreaterThan(len(creeps), 0, "creeps"),
    ).CheckAndPanic()

        // ...
}
</pre>
</div>

<p>
What the heck is that? It's a fluent style of parameter validation I picked up from the author of Paint.Net, Rick Brewster, in an <a href="http://blog.getpaint.net/2008/12/06/a-fluent-approach-to-c-parameter-validation/">article</a> he wrote. It chains together validation, and returns a single error containing all failures. You can also extend it to contain arbitrarily complex validators:
</p>

<div class="org-src-container">
<pre class="src src-go">func ReportFitsRepository(report *Report, repository *Repository) Checker {
    return func() (passes bool, err error) {

        err = fmt.Errorf("A %s report does not belong in a %s repository.", report.Type, repository.Type)
        passes = (repository.Type == report.Type)
        return passes, err
    }
}

func AuthorCanUpload(authorName string, repository *Repository) Checker {
    return func() (passes bool, err error) {
        err = fmt.Errorf("%s does not have access to this repository.", authorName)
        passes = !repository.AuthorCanUpload(authorName)
        return passes, err
    }
}

func AuthorIsCollaborator(authorName string, report *Report) Checker {
    return func() (passes bool, err error) {

        err = fmt.Errorf("The given author was not one of the collaborators for this report.")
        for _, collaboratorName := range report.Collaborators() {
            if collaboratorName == authorName {
                passes = true
                break
            }
        }
        return passes, err
    }
}

func HandleReport(authorName string, report *Report, repository *Repository) {

    BeginValidation().Validate(
        AuthorIsCollaborator(authorName, report),
        AuthorCanUpload(authorName, repository),
        ReportFitsRepository(report, repository),
    ).CheckAndPanic()
}
</pre>
</div>

<p>
Here we can see that parameter validation doesn't have to be verbose, or even hard to write. In fact, if done properly, parameter validation can bring a lot of clarity to your code, and give developers a sense of what you expect data to look like when passing your code boundary.
</p>

<p>
If you're interested in this style of parameter validation, and are working with Go, check out my validation library, <a href="https://github.com/kat-co/vala">Vala</a>.
</p>
</div>
</div>

    </div>
  </div>
</div> <!-- /.container -->
]]></description>
      <pubDate>2017-01-19</pubDate>
      <guid>http://katherine.cox-buday.com/blog/2014/07/31/an-argument-for-parameter-validation/</guid>
    </item>
    <item>
      <title>Why this Year I&#39;m Focusing on Charity.</title>
      <link>http://katherine.cox-buday.com/blog/2014/12/03/why-this-year-im-focusing-on-charity/</link>
      <description><![CDATA[<div class="post">
  <div class="col-sm-3 right-align post-meta">
    <h3>&nbsp;<!-- Placeholder for alignment with post --></h3>
  </div>
  <div class="col-sm-9">
    <div class="post">
      <h3>Why this Year I&#39;m Focusing on Charity.</h3>
      <p>
I am fortunate in my life that I have nurtured a career that not only helps to sustain my family but allows me enough money to enjoy some recreational things. It is for this reason that I'm not sure whether my growing distaste for consumerism has just come with age, or if it's because I can afford things I would like. Either way, I have come to loathe this time of year in The United States.
</p>

<p>
I feel inundated by commercials telling me to buy now, that I should get what I really want this year. Here's a BMW that I deserve. Here's a diamond necklace he had better get me. Here's me suppressing a gag reflex.
</p>

<p>
I'm not out and out against people wanting things -- or gifts. That's all fine (I even have a few items on my list). It's the exuberance of what the last fourth of the year has come to represent. We have an entire season of procurement and societal greed. I've reached a tipping point in my life where the very idea of me sitting down and putting thought into a list of more things I want to acquire leaves a bad taste in my mouth. I don't need more stuff -- no matter how hard the advertising industry tries to sell it. What I would like to do this year is cultivate compassion, and establish a pattern my newborn daughter can look up to. When I think of this time of year, I don't want to think of the exuberance of excess, I want to think of others, and how I can possibly contribute in some small way to the betterment of the world.
</p>

<p>
So last night I sat down and I did make a list. I made a list of charities I'd like to support this year, and going forward. If you're in a position where you don't really need anything, I encourage you to at least stop and think about what this time of year means to you, and whether more things will really enhance your life.
</p>

<p>
Happy holidays, everyone.
</p>

<p>
Katherine
</p>

<ul class="org-ul">
<li>NAMI (<a href="http://www.charitynavigator.org/index.cfm?bay%3Dsearch.summary&amp;orgid%3D4827">National Alliance on Mental Illness</a>)</li>
<li>HRC (<a href="http://www.charitynavigator.org/index.cfm?bay%3Dsearch.summary&amp;orgid%3D6229">The Human Rights Campaign</a>)</li>
<li>WWF (<a href="http://www.charitynavigator.org/index.cfm?bay%3Dsearch.summary&amp;orgid%3D4770">World Wildlife Fund</a>)</li>
<li>Wikimedia Foundation (<a href="http://www.charitynavigator.org/index.cfm?bay%3Dsearch.summary&amp;orgid%3D11212">Wikipedia</a>)</li>
</ul>

    </div>
  </div>
</div> <!-- /.container -->
]]></description>
      <pubDate>2017-01-19</pubDate>
      <guid>http://katherine.cox-buday.com/blog/2014/12/03/why-this-year-im-focusing-on-charity/</guid>
    </item>
    <item>
      <title>Simplicity and Go</title>
      <link>http://katherine.cox-buday.com/blog/2015/07/08/simplicity-and-go/</link>
      <description><![CDATA[<div class="post">
  <div class="col-sm-3 right-align post-meta">
    <h3>&nbsp;<!-- Placeholder for alignment with post --></h3>
  </div>
  <div class="col-sm-9">
    <div class="post">
      <h3>Simplicity and Go</h3>
      <iframe width="560" height="315" src="https://www.youtube.com/embed/S6mEo_FHZ5Y" frameborder="0" allowfullscreen></iframe>

<p>
(<a href="/assets/blog/2015/07/08/simplicity-and-go/simplicity-and-go.pdf">slides</a>)
</p>

    </div>
  </div>
</div> <!-- /.container -->
]]></description>
      <pubDate>2017-01-19</pubDate>
      <guid>http://katherine.cox-buday.com/blog/2015/07/08/simplicity-and-go/</guid>
    </item>
  </channel>
</rss>